using System;
using System.Xml.Serialization;
using NamirialApiClient.Contracts.Actions;
using NamirialApiClient.Contracts.Base;
using NamirialApiClient.Contracts.Forms;
using NamirialApiClient.Contracts.Policies;
using NamirialApiClient.Contracts.Templates;

namespace NamirialApiClient.Contracts.Configuration
{
    /// <summary>
    ///     Defines Ad Hoc Work Step Configuration
    /// </summary>
    [Serializable]
    [XmlRoot("AdhocWorkstepConfiguration", Namespace = "", IsNullable = false)]
    public class AdhocWorkstepConfiguration : ServiceMessageBase<AdhocWorkstepConfiguration>
    {
        /// <summary>
        ///     Gets or Sets Work-step Label
        /// </summary>
        [XmlElement("WorkstepLabel", typeof (string))]
        public string WorkstepLabel { get; set; }

        /// <summary>
        ///     Gets or Sets Small Text Zoom Factor Percent
        /// </summary>
        [XmlElement("SmallTextZoomFactorPercent", typeof (byte))]
        public byte SmallTextZoomFactorPercent { get; set; }

        /// <summary>
        ///     Gets or Sets Work-step Time To Live In Minutes
        /// </summary>
        [XmlElement("WorkstepTimeToLiveInMinutes", typeof (byte))]
        public byte WorkstepTimeToLiveInMinutes { get; set; }

        /// <summary>
        ///     Gets or Sets Finish Action
        /// </summary>
        /// <remarks>
        ///     Configure the actions done by the server and the by the clients when the work-step is finished.
        /// </remarks>
        [XmlElement("FinishAction", typeof (FinishAction))]
        public FinishAction FinishAction { get; set; }

        /// <summary>
        ///     Gets or Sets No Sequence Enforced
        /// </summary>
        /// <remarks>
        ///     Configure the ad-hoc work-step creation
        /// </remarks>
        [XmlElement("NoSequenceEnforced", typeof (byte))]
        public byte NoSequenceEnforced { get; set; }

        /// <summary>
        ///     Gets or Sets Signature Template
        /// </summary>
        /// <remarks>
        ///     Define default properties of signature fields / tasks
        /// </remarks>
        [XmlElement("SigTemplate", typeof (SigTemplate))]
        public SigTemplate SigTemplate { get; set; }

        /// <summary>
        ///     Gets or Sets Parse Form Fields
        /// </summary>
        /// <remarks>
        ///     Configuration for parsing the form fields
        /// </remarks>
        [XmlElement("ParseFormFields", typeof (ParseFormFields))]
        public ParseFormFields ParseFormFields { get; set; }

        /// <summary>
        ///     Gets or Sets Ad hoc Policies
        /// </summary>
        /// <remarks>
        ///     If the work step is not generated by hand but automatically generated by the work step Controller AdhocPolicies are
        ///     specified
        /// </remarks>
        [XmlElement("AdhocPolicies", typeof (AdhocPolicies))]
        public AdhocPolicies AdhocPolicies { get; set; }

        /// <summary>
        ///     Gets or Sets Signature Plugin Configuration
        /// </summary>
        /// <remarks>
        ///     Configure the signatures for this work step. One default configuration has to be defined. The default configuration
        ///     is used for flatten signatures, ad hoc signatures and signature fields which do not reference a special signature
        ///     plugin configuration. The default
        ///     configuration does not contain the attribute 'spcId'. If the attribute 'spcId' is defined the signature plugin
        ///     configuration does only apply to
        ///     signature fields referencing the configuration by specifying
        ///     <param name="spcId">id</param>
        /// </remarks>
        [XmlElement("SignaturePluginConfiguration", typeof (SignaturePluginConfiguration))]
        public SignaturePluginConfiguration SignaturePluginConfiguration { get; set; }

        /// <summary>
        ///     Gets or Sets Signature String Parsing Configuration
        /// </summary>
        /// <remarks>
        ///     Configure the signature string parsing pattern: Text in the document will be parsed for this pattern and if found,
        ///     a signature task is generated.
        /// </remarks>
        [XmlElement("SigStringParsingConfiguration", typeof (SigStringParsingConfiguration))]
        public SigStringParsingConfiguration SigStringParsingConfiguration { get; set; }

        /// <summary>
        ///     Gets or Sets General Policies
        /// </summary>
        /// <remarks>
        ///     Defines general policies for this work step
        /// </remarks>
        [XmlElement("GeneralPolicies", typeof (GeneralPolicies))]
        public GeneralPolicies GeneralPolicies { get; set; }

        /// <summary>
        ///     Gets or Sets Viewer Preferences
        /// </summary>
        /// <remarks>
        ///     Defines Viewer Preferences for this work step
        /// </remarks>
        [XmlElement("ViewerPreferences", typeof (ViewerPreferences))]
        public ViewerPreferences ViewerPreferences { get; set; }
    }
}